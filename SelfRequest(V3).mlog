set bitSelection 0b0
set MaxPercent 0.2  #object variables
set MemoryLocation 0
set isA 0
jump storageCheck notEqual @links prevLinks
jump storageCheck greaterThanEq sC 100
print "made by: Someone's Shadow #9470"
ItemDentify: #Part2!!!
	set prevLinks @links
    set bitLocation 0
    set i 0
    loop2:
        lookup item type i
		op shl bitLocation 1 i #is at the selcted position true?:
        op and isSelected bitLocation bitSelection
		jump skip1 equal isSelected 0 #check
        sensor r1 v1 type #how much x in v1, v2...
        sensor r2 v2 type
        sensor r3 v3 type
        sensor r4 v4 type
        op min am1 r1 r2 #take small
        op min am2 r3 r4
        op min amount am1 am2
        jump skip1 greaterThan amount MaxValue #is this the smallest?
        set typec type #if so set the output
        set isA 1
        set dataItem i
        set a -1
    loop3:
        op add a a 1
        getlink obj a
        sensor oType obj @type
        jump j4 notEqual oType @memory-cell
        write dataItem obj MemoryLocation #at MemoryLocation send item data
    j4:
        control config obj typec #set output
        jump loop3 lessThan a @links
    skip1:
        op add i i 1
        jump loop2 lessThan i @itemCount
    set a -1
    jump loop4 notEqual v1 0
        op equal blink 0 blink
        set isA blink
    loop4:
        op add a a 1
        getlink obj a
        sensor oType obj @type
        jump skip2 equal oType @vault #skip if vault or container
        jump skip2 equal oType @container
        control enabled obj isA #enable or disable
        jump skip2 equal isA 1
        control config obj null
    skip2:
        jump loop4 lessThan a @links
	op add sC sC 1
end
#log: version 3.0 removed display logic, reduced calling the storage check, and mini optimizations
storageCheck:
	set sC 0
	set v1 0
	set v2 0
	set v3 0
	set v4 0
	op mul MaxValue 99999999 MaxPercent
	set lp -1
loop1: #detect containers/vaults
    op add lp lp 1
    getlink obj lp
    sensor oType obj @type
    jump select equal oType @container
    jump select equal oType @vault
    jump select equal oType @core-shard
    jump select equal oType @core-foundation
    jump select equal oType @core-nucleus
    skip0:
    	jump loop1 lessThan lp @links
	jump jb1 notEqual v2 0 #is v2 filled?
    set v2 v1
jb1:
    jump jb2 notEqual v3 0 #is v3 filled?
    set v3 v1
jb2:
    jump jb3 notEqual v4 0 #is v4 filled?
    set v4 v1
jb3:
	jump ItemDentify always
end
select:
    sensor ic obj @itemCapacity
    jump ja1 notEqual v1 0 #is v1 filled?
    set v1 obj
    jump j1 always
ja1: 
    jump ja2 notEqual v2 0 #is v2 filled?
    set v2 obj
    jump j1 always
ja2:
    jump ja3 notEqual v3 0 #is v3 filled?
    set v3 obj
    jump j1 always
ja3:
    jump j1 notEqual v4 0 #is v4 filled?
    set v4 obj
j1:
    op mul ic ic MaxPercent #1000(V) or 300(C) * MaxPercent
    op min ic MaxValue ic #take smallest
    set MaxValue ic #set as new MaxValue
    jump skip0 always
end
