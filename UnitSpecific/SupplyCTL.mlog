
#--UnitBind Logic--
jump skipVars equal varsIsSet true
ubind @
sensor unitType @unit @type
op mul tx @thisx @maph  #create flag...
op add unitFlag tx @thisy
set varsIsSet true
skipVars:
sensor con @unit @controlled
sensor cor @unit @controller
sensor fla @unit @flag
#check if:
jump unitbind strictEqual @unit null    #we dont have a unit binded? ubind.
jump unitbind notEqual fla unitFlag        #it isnt our flag? ubind.
jump unitbind notEqual cor @this        #this is not controlling it? ubind.
jump keepUnit always            #if it passes the checks its safe! 
unitbind: #get vars
ubind unitType
sensor con @unit @controlled
sensor fla @unit @flag
jump unitbind notEqual fla 0 #cant use it?/is it not flag 0? ubind.
keepUnit:
jump unitbind equal con @ctrlPlayer     #is it under player control? ubind.
jump unitbind equal con @ctrlFormation  #is it under formation? ubind.
ucontrol flag unitFlag
#------------------

sensor Item sorter1 @config
getlink Location 1
jump noBind equal Item null
jump startLogic notEqual Location null
noBind:
ucontrol move @thisx @thisy
end
startLogic:
sensor posX Location @x #getvars
sensor posY Location @y
sensor itemType @unit @firstItem
jump goCore equal itemType Item     #does unit either have the item we want
jump goCore equal itemType null     #or no items? then goCore
ulocate building core false @copper ox oy found Core #otherwise itemDrop to Core
ucontrol approach ox oy 1
ucontrol itemDrop Core 999
end
goCore:
sensor itemAmount @unit Item
jump deliverToLocation greaterThan itemAmount 1         #Do we have enough of the item?
ulocate building core false @copper ox oy found Core    #if not resupply in Core
ucontrol approach ox oy 1
ucontrol itemTake Core Item 999
end
deliverToLocation:
ucontrol move posX posY         #From previous checks, this means we are delivering to Location!
ucontrol itemDrop Location 999
end
