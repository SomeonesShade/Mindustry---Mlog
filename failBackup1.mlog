jump configIgnore notEqual bitSelection null
set MaxPercent 0.2  #object variables
print "determines the maxinum percentage of an item in a storage block"
set Origin null
print "The StorageBlock where the items come from. If set to null, automatically finds Core"
set MinOriginAmount 10
print "(rss) Determines the mininum amount of an item to start working"
set MemoryWriteLocation 1
print "doesn't write at cell 1 if MemoryReadLocation >= 0"
set MemoryReadLocation -1
print "reads at cell1 only, doesnt read if MemoryReadLocation < 0"
print "for config selection, set to true(1) or false(0)"
op shl  false 0
op shl  1 1
op shl  1 2
op shl  1 3
op shl  false 4
op shl  1 5
op shl  1 6
op shl  false 7
op shl  false 8
op shl  1 9
op shl  1 10
op shl  1 11
op shl  1 12
op shl  false 13
op shl  false 14
op shl  false 15
print "Do not modify from this point, unless you know how it works"
op add bitSelection  
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
configIgnore:
jump coreIgnore notEqual Origin null #sets the Origin
jump coreIgnore lessThan MinOriginAmount 0
    ubind @gamma
    ulocate building core false @copper ox oy fo Origin
jump coreIgnore equal fo true
    ubind @mono
    ulocate building core false @copper ox oy fo Origin
coreIgnore:
jump bitSkip equal cell1 null #Sets the Bitselection if memory is used
jump bitSkip lessThan MemoryReadLocation 0
    read bitSelection cell1 MemoryReadLocation
bitSkip:
jump storageCheck notEqual @links prevLinks #Determines when to check for Storages
jump ItemDentify equal isA 1
jump storageCheck greaterThanEq sC 25
ItemDentify: #Part2!!!
	set prevLinks @links #reset values used or update
    set bitLocation 0
    set dataItem 0
    set mv MaxValue
    set amount MaxValue
    set i 0
    itemLoop: #label suggests, it loops to determine what item to use
        lookup item type i
		op shl bitLocation 1 i #is at the selcted position true?:
        op and isSelected bitLocation bitSelection
		jump skip1 equal isSelected 0 #check
        sensor c1 Origin type
        jump skip1 lessThan c1 MinOriginAmount #is there anything to unload?
        set index -1
        storageRead: #what is contained in the storages?
        op add index index 1
        op add goBack @counter 1
        jump storageSelect always
        jump loopEscape strictEqual output null
        sensor r1 output type
        op min amount amount r1 #what is the smallest amount of them?
        jump storageRead always
    loopEscape:
        jump skip1 greaterThanEq amount mv #is it the smallest out of the items?
        set typec type #if so set the output
        op add dataItem dataItem bitLocation
        set mv amount
    skip1:
        op add i i 1
        jump itemLoop lessThan i @itemCount
    set isA 1
	jump j3 lessThan mv MaxValue #is everything full?
	set isA 0
    set typec null
    set dataItem 0
    j3:
        set a -1 #note we can prob send the code upward and skip itemLoop if v1 is not present
        jump buildingConfigLoop notEqual v1 0 #do we even have a storage block?
        op equal blink blink 0
        set isA 0
        wait 0.5
        op add sC sC 10
        jump buildingConfigLoop equal blink 0
        set typec null #then blink
    buildingConfigLoop: #this loop now sets the config of buildings with enabled and itemconfig
        op add a a 1
        getlink obj a
        sensor oType obj @type
        jump skip2 equal oType @vault #skip if storage block
        jump skip2 equal oType @container
        jump skip2 equal oType @mass-driver
        jump j4 notEqual oType @memory-cell
        jump datawrite lessThan MemoryReadLocation 0 
        jump j4 equal obj cell1
        datawrite:
        write dataItem obj MemoryWriteLocation #at MemoryWriteLocation send item data
        j4:
        control enabled obj isA #enable or disable
        control config obj typec #set output
    skip2:
        jump buildingConfigLoop lessThan a @links
	op add sC sC 1
end
print "made by: Someone's Shadow #9470"
storageCheck: #set variables
	set sC 0
    set index -1
    set readMode 0
    set input null
storageReset: #clear all storage
    op add index index 1
    op add goBack @counter 1
    jump storageSelect always
    jump storageReset notEqual index null
    set index 0
	op mul MaxValue 99999999 MaxPercent
	set lp -1
storageDetectionLoop: #detect storages
    op add lp lp 1
    getlink obj lp
    jump skip0 equal obj Origin
    sensor oType obj @type
    jump select equal oType @container
    jump select equal oType @vault
    jump select equal oType @mass-driver
    jump select equal oType @core-shard
    jump select equal oType @core-foundation
    jump select equal oType @core-nucleus
    skip0:
    	jump storageDetectionLoop lessThan lp @links
    set readMode 2 #no need to write on second part of the code, just read
	jump ItemDentify always
end
select: #if we have found a storageblock, enter into memory
    jump skip0 strictEqual index null 
    set input obj
    op add goBack @counter 1
    jump storageSelect always
    op add index index 1
j1: #this determines the storage capacity of one storageblock, setted on smallestblock
    sensor ic obj @itemCapacity
    op mul ic ic MaxPercent #1000(V) or 300(C) * MaxPercent
    op min ic MaxValue ic #take smallest
    set MaxValue ic #set as new MaxValue
    jump skip0 always
end
storageSelect: #input, output, readMode, goBack, index
op mul selectStorage index 4
op add selectStorage selectStorage readMode
op add @counter selectStorage @counter
set v1 input
set @counter goBack
set output v1
set @counter goBack
set v2 input
set @counter goBack
set output v2
set @counter goBack
set v3 input
set @counter goBack
set output v3
set @counter goBack
set v4 input
set @counter goBack
set output v4
set @counter goBack
set v5 input
set @counter goBack
set output v5
set @counter goBack
set v6 input
set @counter goBack
set output v6
set @counter goBack
set v7 input
set @counter goBack
set output v7
set @counter goBack
set v8 input
set @counter goBack
set output v8
set @counter goBack
set index null
set @counter goBack
set output null
set @counter goBack

#log: version 2.0 removed display logic, reduced calling the storage check, and mini optimizations
#log: version 2.1 added massdriver as storage option (-this cant disable massdrivers on low item)
#also rss/coreitemsaver (-maybreak monos on placement)
#log: version 2.2 improved memory interactions with new potential avenues, optimized storagecheck slightly
#log: failed version 2.3 renamed Core into Origin, added storage array to theoretically bind up to 8 storage blocks
#also Renamed into General-AntiClog soonTM if recon logic can work, Needs! optimizations,more than the 1 sec rule

#Plans:
#ver 3.0+
#Reverse Mode
#Recon/Factory Intergration
#Automatic Config + Overrides
#Performance Lockdown, to insure <2 sec or at best <1sec performance
#External Schem for config via mem block display