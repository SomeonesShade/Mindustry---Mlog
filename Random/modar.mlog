print "[grey]|MassDriver Side [white]Logic:\n"
jump cellFound notEqual cell null
set location putHere:D
op mod y location @maph
op sub lx location y
op div x lx @maph  #create flag...
jump hasLocation notEqual x 0
jump hasLocation notEqual y 0
print "[yellow]put the number from the recon into this processor at location\n[white]"
printflush
write data cell1 0
jump 0 always 0 0 
hasLocation:
jump skipUbind notEqual unitType null
ubind @mono
sensor unitType @unit @type
skipUbind:
jump skipVars notEqual unitFlag 0 
op mul tx @thisx @maph  #create flag... note: its not worth to add in a check if x and y is both 0
op add unitFlag tx @thisy
skipVars:
#----Main Logic----
sensor con @unit @controlled
sensor cor @unit @controller
sensor fla @unit @flag
#check if:
jump unitbind strictEqual @unit null    #we dont have a unit binded? ubind.
jump unitbind notEqual fla unitFlag        #it isnt our flag? ubind.
jump keepUnit always            #if it passes the checks its safe! 
unitbind: #get vars
ubind unitType
sensor con @unit @controlled
sensor fla @unit @flag
jump unitbind notEqual fla 0 #cant use it?/is it not flag 0? ubind.
keepUnit:
jump unitbind greaterThanEq con 2     #is it under player control/formation? ubind.
ucontrol flag unitFlag
#------------------
ucontrol move x y
ucontrol getBlock x y type cell 0
print "[green]Moving towards factory cell\n[white]"
printflush
write data cell1 0
end
cellFound:
write 100 cell 1
read data cell 0
write data cell1 0
read data cell1 2
write data cell 2
read data cell1 3
write data cell 3
read data cell1 4
write data cell 4
print "[white]Data Connection established : D"
printflush
end
print "By Shade"
