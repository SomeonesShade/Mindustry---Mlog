set OriginBlock null #the block used in reversemode, or rss
set ReadMemoryBlock cell1

jump configIgnore equal skipVars 1
print "(Block/Bool) The StorageBlock where the items come from. If set to false, disables origin functionality"
print "(memoryblock) The cell block for reading configuration"

jump pt1 always 0 0
print "Threshold Settings"
end; end; pt1:

set MaxAmount 0.65  #this functions as a buffer (filling it to full will practically clog)
print "(whole number/decimal) determines the target amount of an item to maintain in a storage block. If it's in decimal (as a percentage), takes the percentage of the smallest storage into account"
set MinOriginAmount 2000 #acts as a threshold for reverse mode and dont kill core lel
print "(integer/decimal) Determines the mininum amount/percentage of an item inside the origin to start working"
set PowerStoredThreshold 0.4
print "(decimal) If the Power Stored in Power Grid amount/capacity goes below this percentage, deactivate (in PowerRSSBlockType)"
set IsCluster true #if dealing. chained or seperated storages, no diffrence if single
print "(bool) If the anticlog will want to have a total amount of items in all storages (true), or a baseline of items in all storages (false)"

jump pa1 always 0 0
print "Item Configuration"
end; end; pa1: 

print "(bool) for config selection, set to true(1) or false(0)" #bit selection from Username, best QOL config lel
op shl  false 0
op shl  1 1
op shl  1 2
op shl  1 3
op shl  false 4
op shl  1 5
op shl  1 6
op shl  false 7
op shl  false 8
op shl  1 9
op shl  1 10
op shl  1 11
op shl  1 12
op shl  false 13
op shl  false 14
op shl  false 15
op shl  false 16
op shl fissile-matter false 17 #unused
op shl dormant-cyst false 18 #unused
op shl  false 19
op shl  false 20
op shl  false 21

jump pb1 always 0 0
print "Memory Settings"
end; end; pb1:
#set memread to -1 if only write
set MemoryWriteLocation 1 #write and read allows multiproc behavior for mainly long distance, or multiple origins
print "(whole number) doesn't write at ReadMemoryBlock if MemoryReadLocation >= 0, sends out item bit config"
set MemoryReadLocation 1
print "(integer) reads at ReadMemoryBlock only, doesnt read if MemoryReadLocation < 0"

jump pc1 always 0 0
print "Miscellaneous Settings"
end; end; pc1:

set FindCore true
print "(bool) If this should set the Origin as the Core (via a mono), only works if OriginBlock is null"
set FindCoreUnitType @mono
print "(unitType) Unit used to detect core automatically"
set PowerRSSBlockType @power-node
print "(BlockType) What BlockType to measure battery from"
set IgnoreBlink false
print "(bool) disables 'blinking' (it happens when there are no storages detected)"
set IncludeMassDriverInStorageCalculation false
print "(bool) removes massdrivers in calculating the MaxValue (except if its the only storage blocks present), will still detect massdrivers for items"
set OnlyMassDriversValue 120
print "(whole number) what to set the BaseLineValue & TotalMaxStorage to if massdrivers is the only storage type binded (relevant if IncludeMassDriverInStorageCalculation = false)"
set SetStorageAsCore false #This is so broken lol
print "(bool) Sets one storage in the code as the Core"

jump pd1 always 0 0
print "Additional Notes/Behavior"
end; end; pd1:

print "if (MaxAmount > 1.01) {whole number} else {decimal}"
print "MaxAmount (whole number) -> Overrides regardless: MaxValue = MaxAmount"
print "MaxAmount (decimal): ..."
print "-> IsCluster (true) -> MaxValue = TotalMaxStorage + BaseLineValue(MaxAmount - 1)"
print "-> IsCluster (false) -> MaxValue = BaseLineValue(MaxAmount)"
print "Memory System: ..."
print "-> (writing behavior): Outputs the current dataItem (bit representation of config) into any selected binded memcells (except ReadMemoryBlock) at MemoryWriteLocation"
print "-> (reading behavior): reads at ReadMemoryBlock & at MemoryReadLocation to get a configuration (in bit representation) that overrides bitSelection"


jump pEnd always 0 0
end; end;
print "Do not modify from this point, unless you know how it works lel"
end; end; pEnd:

op add bitSelection   #compile config into a single number (ex: 101 as an example)
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection fissile-matter
op add bitSelection bitSelection dormant-cyst
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 

printflush null

#hmm ln(bitSelection * 2)/ln(2)
op shl bitTemp bitSelection 1
op log bitTemp bitTemp 0
op div itemCount bitTemp 0.6931471805599453
#hmm

#__caution (itemStartingID Check)
set itemStartingID 0
itemStartingIDCheck:
op shl bitLocation 1 itemStartingID
op and isSelected bitLocation bitSelection
jump itemStartingIDEnd notEqual isSelected 0
op add itemStartingID itemStartingID 1
jump itemStartingIDCheck lessThan itemStartingID itemCount
itemStartingIDEnd:
#__caution

-printCalculation:
    jump clusterMessage equal IsCluster true
    set storageModeMessage "\n[#DDDDFF]Current Storage Mode: [#BBBBEE]BaseLine\n[]Current Origin: [#BBBBEE]"
    jump skipMemA1 always 0 0
    clusterMessage:
    set storageModeMessage "\n[#DDDDFF]Current Storage Mode: [#BBBBEE]Cluster\n[]Current Origin: [#BBBBEE]"
    skipMemA1:
    set fullStorageModeMessage "\n\n[#AAFFAA]Storage(s) has reached Objective.\nReactivates if any item for each storage reaches below "
    jump skipMemA3 equal IsCluster false
    set fullStorageModeMessage "\n\n[#AAFFAA]Storage(s) has reached Objective.\nReactivates if the total amount of items from all types reaches below "
    skipMemA3:

-ignoreMessageStorage:
    op greaterThanEq shouldOverideMaxAmount MaxAmount 1.01
    set OriginItemLimit MinOriginAmount
    jump originDisable strictEqual OriginBlock false
    jump endOfSettings always 0 0
    originDisable:
    set OriginItemLimit -1
    endOfSettings:
set skipVars 1

configIgnore:
set message_code 0 #m0
jump originCoreIgnore lessThan OriginItemLimit 0
#   set message_code 5 #m1

    jump originIgnore equal OriginBlock null #sets the Origin
    set Origin OriginBlock

    originIgnore:
    sensor hasOriginDied Origin @dead
jump originPercentage equal hasOriginDied false

originCoreFind: #this break a lot of stuff
    jump originCoreIgnore equal FindCore false
        ubind FindCoreUnitType
        sensor controlled @unit @controlled
    sensor unitDied @unit @dead
    jump noValidUnitFoundA equal unitDied true
    jump validUnitFoundA lessThan controlled 2 #UHHHHHHHHHH
    noValidUnitFoundA:
        set message_code 20 #m5
        jump originCoreIgnore always 0 0
    validUnitFoundA:
        ulocate building core false @copper ox oy fo Origin

originPercentage:
    jump originCoreIgnore greaterThanEq MinOriginAmount 1
    sensor originCapacity Origin @itemCapacity
    op mul OriginItemLimit originCapacity MinOriginAmount

originCoreIgnore:
    jump coreIgnore equal SetStorageAsCore false

    sensor hasOverrideDied StorageOverride @dead
    jump bitStart equal hasOverrideDied false
coreFind:
        ubind FindCoreUnitType
        sensor controlled @unit @controlled
    sensor unitDied @unit @dead
    jump noValidUnitFound equal unitDied true
    jump validUnitFound lessThan controlled 2 #UHHHHHHHHHH part 2
    noValidUnitFound:
        set message_code 20 #m5
        jump coreIgnore always 0 0
    validUnitFound:
        ulocate building core false @copper ox oy fo StorageOverride
    jump bitStart always 0 0
coreIgnore:
set StorageOverride 0

bitStart:
jump bitSkip equal ReadMemoryBlock null #Sets the Bitselection if memory is used
jump bitSkip lessThan MemoryReadLocation 0
    read bitSelection cell1 MemoryReadLocation
#hmm ln(bitSelection * 2)/ln(2) a bit slower on max sadly (i wish log2 were a thing)
    op shl bitTemp bitSelection 1
    op log bitTemp bitTemp 0
    op div itemCount bitTemp 0.6931471805599453

    set memReadAMessage " items\n[#FFAAFF]Reading any binded cell for item configuration"
jump storageLoopCheck always 0 0

bitSkip:
set memReadAMessage " items"

storageLoopCheck: #Determines when to check for Storages
    jump storageCheck notEqual @links prevLinks     #trigger storageCheck if any link (amount) is changed
    jump ItemDentify equal isA true                    #do not trigger storageCheck if it is currently working
    jump storageCheck greaterThanEq sC 25           #timer lel

ItemDentify: #Part2!!!
    jump isStoragePresent notEqual v1 0 #do we even have a storage block?
    jump isStoragePresent equal IgnoreBlink true #Do not blink is IgnoreBlink is set to true
        set message_code 17 #m4       #Alert Message
        op equal blink blink 0      #then start blinking
        set isA false                   #do not enable
        wait 0.5                    #no epilepsy
        op add sC sC 10             #increase checks so it can be updated asap
        set dataItem 0              #do not send anything
        set typec @dormant-cyst     #dark-orange (error color) or...
        jump j3 equal blink 0
        set typec null              #absolutely nothing
    jump j3 always 0 0          #immediately skip itemLoop

isStoragePresent:
    sensor powerBlockDead PowerBlock @dead
    jump powerIsPresent equal powerBlockDead true
    sensor powerStored PowerBlock @powerNetStored
    sensor powerCapacity PowerBlock @powerNetCapacity
    op div powerPercentage powerStored powerCapacity
    jump powerIsPresent greaterThanEq powerPercentage PowerStoredThreshold
    set message_code 27 #m6          #Alert Message
        op equal blink blink 0      #then start blinking
        set isA false                   #do not enable
        wait 0.5                    #no epilepsy
        set dataItem 0              #do not send anything
        set typec @dormant-cyst     #dark-orange (error color) or...
        jump j3 equal blink 0
        set typec @fissile-matter   #other unused content, to prevent leaking weird items if placed in hyperproc 
    jump j3 always 0 0          #immediately skip itemLoop

powerIsPresent:
	set prevLinks @links #reset values used or update
    set bitLocation 0
    set dataItem 0
    set mv MaxValue
    set i itemStartingID
itemLoop: #label suggests, it loops to determine what item to use
        lookup item type i
        op shl bitLocation 1 i #is at the selcted position true?:
        op and isSelected bitLocation bitSelection
        jump skip1 equal isSelected 0 #check
        sensor c1 Origin type
        jump skip1 lessThan c1 OriginItemLimit #is there anything to unload?
        
    jump selectedAdd equal IsCluster true #take multi input or single?
    
    sensor amount v1 type
    op add @counter @counter storage_offset #max 2
        sensor r16 v16 type   #how much items
        op add amount amount r16
        sensor r15 v15 type
        op add amount amount r15
        sensor r14 v14 type
        op add amount amount r14
        sensor r13 v13 type
        op add amount amount r13
        sensor r12 v12 type
        op add amount amount r12
        sensor r11 v11 type
        op add amount amount r11
        sensor r10 v10 type
        op add amount amount r10
        sensor r9 v9 type
        op add amount amount r9
        sensor r8 v8 type
        op min amount amount r8
        sensor r7 v7 type
        op min amount amount r7
        sensor r6 v6 type
        op min amount amount r6
        sensor r5 v5 type
        op min amount amount r5
        sensor r4 v4 type
        op min amount amount r4
        sensor r3 v3 type
        op min amount amount r3
        sensor r2 v2 type
        op min amount amount r2
    jump amountCheck always 0 0

        set select_index -1
        storageMinRead: #what is contained in the storages?
            op add select_index select_index 1                      #loop start
            op add go_back @counter 1; jump storageSelect always 0 0 #function call...
            jump amountCheck strictEqual select_output null         #does mentioned vault exist?
            sensor rV select_output type                            #then: do operation:
            op min amount amount rV
            jump storageMinRead always 0 0
    
    selectedAdd:
    sensor amount v1 type
    op add @counter @counter storage_offset #max 2
        sensor r16 v16 type   #how much items
        op add amount amount r16
        sensor r15 v15 type
        op add amount amount r15
        sensor r14 v14 type
        op add amount amount r14
        sensor r13 v13 type
        op add amount amount r13
        sensor r12 v12 type
        op add amount amount r12
        sensor r11 v11 type
        op add amount amount r11
        sensor r10 v10 type
        op add amount amount r10
        sensor r9 v9 type
        op add amount amount r9
        sensor r8 v8 type
        op add amount amount r8
        sensor r7 v7 type
        op add amount amount r7
        sensor r6 v6 type
        op add amount amount r6
        sensor r5 v5 type
        op add amount amount r5
        sensor r4 v4 type
        op add amount amount r4
        sensor r3 v3 type
        op add amount amount r3
        sensor r2 v2 type
        op add amount amount r2
    jump amountCheck always 0 0

        set select_index -1
        storageAddRead: #what is contained in the storages?
            op add select_index select_index 1                      #loop start
            op add go_back @counter 1; jump storageSelect always 0 0 #function call...
            jump amountCheck strictEqual select_output null         #does mentioned vault exist?
            sensor rV select_output type                            #then: do operation:
            op add amount amount rV
            jump storageAddRead always 0 0

    amountCheck: #the heart of the itemLoop
        jump skip1 greaterThanEq amount mv #is it the smallest out of the items?
        set typec type #if so set the output
        op add dataItem dataItem bitLocation
        set mv amount

    skip1:
        op add i i 1
        jump itemLoop lessThan i itemCount

-isAConfiguration:
    op lessThan isA mv MaxValue
    
    jump j3 equal isA true #is everything full?
        set typec null
        set dataItem 0
    
    jump j3 greaterThan message_code 9 #m2  #TODO: this may need a revision
    set message_code 9 #m2
j3:
    set a -1
    buildingConfigLoop: #this loop now sets the config of buildings with enabled and itemconfig
        op add a a 1
        getlink obj a
        sensor oType obj @type
            jump jItemConfig equal oType @inverted-sorter #skip if storage block
            jump jItemConfig equal oType @sorter
            jump skip2 equal oType @mass-driver
            jump messageDisplay equal oType @message
            jump jUnloader equal oType @unloader #jUnloader
            jump jEnable notEqual oType @memory-cell
            jump datawrite lessThan MemoryReadLocation 0 
            jump jEnable equal obj ReadMemoryBlock #ohmygod was hardcoded to cell1 lmao
    
    datawrite:
        write dataItem obj MemoryWriteLocation #at MemoryWriteLocation send item data
        jump skip2 always 0 0
    jUnloader: #this is slow... but it's forced to have no null loader shenanigans
        sensor config obj @config
        jump jEnable notEqual config null
        control config obj typec #set output
    jEnable:
        control enabled obj isA #enable or disable
    jItemConfig:
        control config obj typec #set output
    skip2:
        jump buildingConfigLoop lessThan a @links
	op add sC sC 1
end

messageDisplay:
print "[#DDDDFF]Semi-AntiClog 3.9\nmade by: [#0]|[white]Someone's []Shade\n[]Setting All Item Config Blocks To: [#BBBBEE]"
print typec

-counterMessageStart:
op add @counter @counter message_code

#do message count rechecks!
#0
operational: #m0 - l9
    print storageModeMessage
    print Origin
    print "\n[#DDDDFF]Current RSS Threshold is set to: [#BBBBEE]"
    print OriginItemLimit
    print "\n\n[#AAFFAA]Operational!\nTargeting for "
    print MaxValue
    print memReadAMessage
    printflush obj
    jump skip2 always 0 0

#9
-depreciated: #m1 - l0
    #print "\n\n[#AAFFAA]Operational!\nTargeting for "
    #print MaxValue
    #print " items.\n[#FFFFAA]Internal RSS activated and set to "
    #print OriginItemLimit
    #print memReadBMessage
    #printflush obj
    #jump skip2 always 0 0

#9
fullStorage: #m2 - l8
    print storageModeMessage
    print Origin
    print "\n[#DDDDFF]Current RSS Threshold is set to: [#BBBBEE]"
    print OriginItemLimit
    print fullStorageModeMessage
    print MaxValue
    printflush obj
    jump skip2 always 0 0

#17
-depreciated: #m3 - l0
    #print "m3 is depreciated"
    #print "..."
    #printflush obj
    #jump skip2 always 0 0

#17
noStorageDetected: #m4 - l3
    print "\n\n[#FFAAAA]error: No Storage Block Found\nPlease Bind to One"
    printflush obj
    jump skip2 always 0 0

#20
noUnitDetected: #m5 - l7
    print "\n[#DDDDFF]Current Origin: [#BBBBEE]"
    print Origin
    print "\n\n[#FFAAAA]error: No Valid "
    print FindCoreUnitType
    print " Found\n\nPlease either make the unit or configurate the settings to use a diffrent unit type"
    printflush obj
    jump skip2 always 0 0

#27
powerLow: #m6 - l7
    print "\n[#DDDDFF]Current Measured Power Block: [#BBBBEE]"
    print PowerBlock
    print "\n\n[#FFAAAA]Disabled: Not Enough Power Stored. Power Percentage Threshold: "
    print PowerStoredThreshold
    print "\n\nCurrent Power Percentage Stored: "
    print powerPercentage
    printflush obj
    jump skip2 always 0 0

#34

storageCheck: #set variables
	set sC 0 #reset storageCheck counter
    set select_readMode 0
    set storageCount 0
    set massDriverCount 0
    set v1 0 #reset storages #NOTE: add counter array for optimization? (issue is determining the storageCount in first run)
	set v2 0
	set v3 0
	set v4 0
    set v5 0
    set v6 0
    set v7 0
    set v8 0
    set v9 0
    set v10 0
    set v11 0
    set v12 0
    set v13 0
    set v14 0
    set v15 0
    set v16 0
jump storageArrayIgnore strictEqual v17 null

    set select_index -1
    set select_input null
storageReset: #clear all storage
    op add select_index select_index 1
    op add go_back @counter 1; jump storageSelect always 0 0
    jump storageReset notEqual select_index null

storageArrayIgnore:
	op mul BaseLineValue 99999999 MaxAmount #this var is for setting the mininum items for each storage (IsCluster = false)
    set TotalMaxStorage 0 #this var is for setting the maxinum sum of items of every storage (IsCluster = true)
	
    set select_index 0
    set lp -1
storageDetectionLoop: #detect storages via getlink loop
    op add lp lp 1
    getlink obj lp
    jump skip0 equal obj Origin
    sensor oType obj @type
        jump select equal oType @container #which blocks are considered storages
        jump select equal oType @vault
        jump massDriverSelect equal oType @mass-driver
        jump select equal oType @core-shard
        jump select equal oType @core-foundation
        jump select equal oType @core-nucleus
    
    jump skip0 notEqual oType PowerRSSBlockType
    set PowerBlock obj

    skip0:
jump storageDetectionLoop lessThan lp @links

#!dangerous
    jump noOverride equal StorageOverride 0
    jump hasOverriden equal loopOnceOverrideCheck true
        set obj StorageOverride
        set loopOnceOverrideCheck true
        jump select always 0 0
    hasOverriden:
    set loopOnceOverrideCheck false
noOverride:
#!dangerous
    
    set select_readMode 2 #no need to write on second part of the code, just read
-storage_offset_Calculation:
    op max storage_offset storageCount 1
    op sub storage_offset 16 storage_offset #7 being max - 1
    op mul storage_offset storage_offset 2 #2 lines
    
    jump skip greaterThan storage_offset -1
        set storage_offset 31 #(15 * 2) + 1
    skip:

jump validStorageArray equal IncludeMassDriverInStorageCalculation true #incl in calc?
jump validStorageArray lessThan massDriverCount storageCount #are all of the storages only mass drivers

set BaseLineValue OnlyMassDriversValue
set TotalMaxStorage OnlyMassDriversValue

validStorageArray:
jump overideMaxValue equal shouldOverideMaxAmount true
    
jump clusterIgnore equal IsCluster false #is this cluter mode?  
-clusterNotIgnored: #MaxValue = TotalMaxStorage + BaseLineValue(MaxAmount - 1)
    op sub temp MaxAmount 1
    op mul temp temp BaseLineValue
    op add MaxValue TotalMaxStorage temp
    jump ItemDentify always 0 0
end
clusterIgnore:
    op mul MaxValue BaseLineValue MaxAmount
    jump ItemDentify always 0 0
end
overideMaxValue:
    set MaxValue MaxAmount
    jump ItemDentify always 0 0
end

massDriverSelect:
op add massDriverCount massDriverCount 1
select: #if we have found a storageblock, enter into memory
    sensor ic obj @itemCapacity
    op mul index storageCount 2
    op min index index 32 #(16 * 2)
    op add @counter @counter index

    set v1 obj #and update TotalMaxStorage
        jump baselineCalculation always 0 0

    set v2 obj
        jump baselineCalculation always 0 0
          
    set v3 obj
        jump baselineCalculation always 0 0
          
    set v4 obj
        jump baselineCalculation always 0 0
          
    set v5 obj
        jump baselineCalculation always 0 0
          
    set v6 obj
        jump baselineCalculation always 0 0
          
    set v7 obj
        jump baselineCalculation always 0 0
          
    set v8 obj
        jump baselineCalculation always 0 0
    
    set v9 obj
        jump baselineCalculation always 0 0
    
    set v10 obj
        jump baselineCalculation always 0 0
    
    set v11 obj
        jump baselineCalculation always 0 0
    
    set v12 obj
        jump baselineCalculation always 0 0
    
    set v13 obj
        jump baselineCalculation always 0 0
    
    set v14 obj
        jump baselineCalculation always 0 0
    
    set v15 obj
        jump baselineCalculation always 0 0
    
    set v16 obj
        jump baselineCalculation always 0 0

-jArray:
    jump skip0 strictEqual select_index null #if hardcode storage has been reached, use this array
    set select_input obj
    op add go_back @counter 1; jump storageSelect always 0 0
    op add select_index select_index 1

baselineCalculation:
    op add storageCount storageCount 1
    jump storageStatsCalculation notEqual oType @mass-driver
    jump skip0 equal IncludeMassDriverInStorageCalculation false
storageStatsCalculation: 
    op add TotalMaxStorage TotalMaxStorage ic
    op min ic BaseLineValue ic #take smallest
    set BaseLineValue ic #set as new BaseLineValue
    jump skip0 always 0 0
end

print "if somehow 16 storages is not enough, this is the area for extra"
storageSelect: #select_input, select_output, select_readMode, go_back, select_index
op mul selectStorage select_index 4
op add selectStorage selectStorage select_readMode
op add @counter selectStorage @counter
    set v17 select_input
    set @counter go_back
    set select_output v17
    set @counter go_back
    set v18 select_input
    set @counter go_back
    set select_output v18
    set @counter go_back
    set v19 select_input
    set @counter go_back
    set select_output v19
    set @counter go_back
    set v20 select_input
    set @counter go_back
    set select_output v20
    set @counter go_back
    set v21 select_input
    set @counter go_back
    set select_output v21
    set @counter go_back
    set v22 select_input
    set @counter go_back
    set select_output v22
    set @counter go_back
    set v23 select_input
    set @counter go_back
    set select_output v23
    set @counter go_back
    set v24 select_input
    set @counter go_back
    set select_output v24
    set @counter go_back
    set v25 select_input
    set @counter go_back
    set select_output v25
    set @counter go_back
    set v26 select_input
    set @counter go_back
    set select_output v26
    set @counter go_back
    set v27 select_input
    set @counter go_back
    set select_output v27
    set @counter go_back
    set v28 select_input
    set @counter go_back
    set select_output v28
    set @counter go_back
    set v29 select_input
    set @counter go_back
    set select_output v29
    set @counter go_back
    set v30 select_input
    set @counter go_back
    set select_output v30
    set @counter go_back
    set v31 select_input
    set @counter go_back
    set select_output v31
    set @counter go_back
    set v32 select_input
    set @counter go_back
    set select_output v32
    set @counter go_back
end
print "if somehow 32 storages is not enough, you can add more manually via the format"

#Semi-AntiClog 3.9
#Behavior Change: MaxAmount Calculation Revised for Percentage Input when IsCluster is true
#added IncludeMassDriverInStorageCalculation to compliment the above change
#Internal:  minor comments in the storage array
#Internal: Processor Works Faster by skipping the initial 0s if the bit config has them
#Bugfix: no potential item leaking when enabling from null unloaders
#Added Additional Documentation
#Bugfix: to -0.25, only md bind can clear storages
#Behavior Change: to -0.125, only md bind will just default to 1 md storage or OnlyMassDriversValue

#TODO 3.9.1: 
#Add a cap with the MinOriginAmount if set to decimal, following standard rss rules
#Add connect something form a distance (two options, arcbind and manual xy coord)
#manual config generation (with the old 3.3) + an override bitselection due to it