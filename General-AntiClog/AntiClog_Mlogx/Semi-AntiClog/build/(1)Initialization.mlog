set OriginBlock null
print "(Block/Bool) The StorageBlock where the items come from. If set to false, disables origin functionality"
jump configIgnore equal skipVars 1
set MaxPercent 0.2
print "(decimal) determines the maxinum percentage of an item in a storage block"
set FindCore true
print "(bool) If to set the Origin as the Core (via a mono), only works if OriginBlock is null"
set MinOriginAmount 10
print "(integer) /rss/ Determines the mininum amount of an item to start working"
p5: 
jump p5 notEqual 0 0
print "Item Configuration"
p6: 
jump p6 notEqual 0 0
print "for config selection, set to true(1) or false(0)"
op shl  false 0
op shl  1 1
op shl  1 2
op shl  1 3
op shl  false 4
op shl  1 5
op shl  1 6
op shl  false 7
op shl  false 8
op shl  1 9
op shl  1 10
op shl  1 11
op shl  1 12
op shl  false 13
op shl  false 14
op shl  false 15
p1: 
jump p1 notEqual 0 0
print "MultiStorage/Processor Settings, you will almost never use these"
p2: 
jump p2 notEqual 0 0
set IsCluster false
print "(bool) If the anticlog will want to have a baseline of items in all storages, or a total amount of items in all storages"
set MemoryWriteLocation 1
print "(whole number) doesn't write at cell 1 if MemoryReadLocation >= 0, sends out item bit config"
set MemoryReadLocation -1
print "(integer) reads at cell1 only, doesnt read if MemoryReadLocation < 0"
p3: 
jump p3 notEqual 0 0
print "Random Settings"
p4: 
jump p4 notEqual 0 0
set IgnoreBlink false
print "disables 'blinking' (it happens when there are no vaults detected)"
print "Do not modify from this point, unless you know how it works lel"
op add bitSelection  
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
op add bitSelection bitSelection 
jump originDisable strictEqual OriginBlock false
jump endOfSettings always
originDisable:
set MinOriginAmount -1
endOfSettings:
set skipVars 1
configIgnore:
jump coreIgnore lessThan MinOriginAmount 0
jump originIgnore equal OriginBlock null
set Origin OriginBlock
originIgnore:
jump coreIgnore notEqual Origin null
jump coreIgnore equal FindCore false
ubind @mono
sensor controlled @unit @controlled
jump originIgnore greaterThanEq controlled 2
ulocate building core false @copper ox oy fo Origin
coreIgnore:
jump bitSkip equal cell1 null
jump bitSkip lessThan MemoryReadLocation 0
read bitSelection cell1 MemoryReadLocation
bitSkip: #Determines when to check for Storages
jump storageCheck notEqual @links prevLinks
jump ItemDentify equal isA 1
jump storageCheck greaterThanEq sC 25