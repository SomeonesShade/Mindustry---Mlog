set prevTotal total
control enabled door1 1
sensor con @unit @controlled
sensor cor @unit @controller
sensor fla @unit @flag
jump unit strictEqual @unit null
jump unit equal fla 0
jump unit notEqual cor @this
jump othercheck always @unit null
unit:
	ubind @quad
	control enabled door1 0 0 0 0
	sensor con @unit @controlled
	sensor fla @unit @flag
	jump unit notEqual fla 0
othercheck:
	jump unit equal con @ctrlPlayer
	jump unit equal con @ctrlFormation
op mul tx @thisx @maph
op add w tx @thisy
ucontrol flag w

sensor pT1 tower1 @payloadCount
sensor pT2 tower2 @payloadCount
sensor d conveyor1 @rotation
sensor lx conveyor1 @x
sensor ly conveyor1 @y
sensor enab conveyor1 @enabled
sensor unitPayload @unit @payloadCount

#State Manager
jump standby equal standbyState 1
jump state1 equal state 1
jump state2 equal state 2
jump state3 equal state 3
state0:
#TakeFrom Tower1
	print "Taking from tower"
	printflush message1
	sensor desX tower1 @x
	sensor desY tower1 @y
	op add exit @counter 1
	jump payloadTake always
	jump 0 equal unitPayload 0
	set state 1
end
#Find Location

state1:
	jump 0 lessThan unitPayload 1
	jump skipD1 equal d 0
	op add lx lx 2
skipD1:
	jump skipD2 equal d 1
	op add ly ly -2
skipD2:
	jump skipD3 equal d 2
	op add lx lx -2
skipD3:
	jump skipD4 equal d 3
	op add ly ly 2
skipD4:
	
#Drop Vault1
	print "Droping to dest"
	printflush message1
	set desX lx
	set desY ly
	op add exit @counter 1
	jump payloadDrop always
	sensor unitPayload @unit @payloadCount
	jump 0 equal unitPayload 1
	set standbyState 1
end
standby:
	print "On Standby"
	printflush message1
	sensor desX vault1 @x
	sensor desY vault1 @y
	ucontrol move desX desY
	jump 0 equal enab 1
	set standbyState 0
	set state 2
end
#Take Vault1 w/ condition
state2:
	print "Taking Vault"
	printflush message1
	sensor desX vault1 @x
	sensor desY vault1 @y
	op add exit @counter 1
	jump payloadTake always
	jump 0 equal unitPayload 0
set state 3
end
#Drop at tower2
state3:
	print "Droping to Tower"
	printflush message1
	sensor desX tower2 @x
	sensor desY tower2 @y
	op add exit @counter 1
	jump payloadDrop always
	jump 0 equal unitPayload 1
set state 0
end

payloadTake:
	ucontrol move desX desY
	ucontrol within desX desY 0.25 r
	op notEqual r r 1
	ucontrol payTake r
	set @counter exit	
payloadDrop:
	ucontrol move desX desY
	ucontrol within desX desY 0.25 r
	jump skipP equal r false
	ucontrol payDrop
skipP:
	set @counter exit